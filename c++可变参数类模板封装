#include "parameter.h"
#include <iostream>
#include <string>

using namespace std;


template<typename... Values>class Tuple;
template<>class Tuple<> {};

template<typename Head, typename... Tail>
class Tuple<Head, Tail...>
    :private Tuple<Tail...>	// 私有继承自Tuple<Tail...>
{
    using inherited = Tuple<Tail...>; //定义inherited 为 基类类型
public:
    Tuple() {}
    Tuple(Head v, Tail... vtail) // 将第一个元素 赋值给m_head, 其余传给基类
        :m_head(v), inherited(vtail...)
    {}

    Head head() { return m_head; }  // 返回元组的第一个元素
    inherited& tail() { return *this; } // 返回该元组的基类引用

protected:
    Head m_head;
};


template<typename Head, typename... Tail>
ostream& operator<<(ostream& os, Tuple<Head, Tail...>& tpe) // 当元素个数大于1时调用该方法
{
    os << tpe.head() << ",";
    operator<<(os, tpe.tail()); // 将tpe的基类作为输出的对象 递归调用输出函数
    return os;
}

template<typename T>
ostream& operator<<(ostream& os, Tuple<T>& tpe) // 当元素个数为 1 是调用该方法
{
    os << tpe.head();
    return os;
}

template<typename Head, typename... Tail>
void ParseParam(Tuple<Head, Tail...>& tpe) // 当元素个数大于1时调用该方法
{
    os << tpe.head() << ",";
    operator<<(os, tpe.tail()); // 将tpe的基类作为输出的对象 递归调用输出函数
    return os;
}

template<typename T>
void ParseParam(Tuple<T>& tpe) // 当元素个数为 1 是调用该方法
{
    os << tpe.head();
    return os;
}


int main(void)
{
    Tuple<int, string, float> mt(10, string("fsdf"), 23.0);
    
    cout << "mt = " << mt << endl;
    system("pause");
    return 0;
}
